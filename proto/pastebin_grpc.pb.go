// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/pastebin.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PastebinService_CreatePaste_FullMethodName   = "/pastebin.PastebinService/CreatePaste"
	PastebinService_GetPaste_FullMethodName      = "/pastebin.PastebinService/GetPaste"
	PastebinService_CreateDiff_FullMethodName    = "/pastebin.PastebinService/CreateDiff"
	PastebinService_GetDiff_FullMethodName       = "/pastebin.PastebinService/GetDiff"
	PastebinService_GetCompletion_FullMethodName = "/pastebin.PastebinService/GetCompletion"
)

// PastebinServiceClient is the client API for PastebinService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Services
type PastebinServiceClient interface {
	// Paste operations
	CreatePaste(ctx context.Context, in *CreatePasteRequest, opts ...grpc.CallOption) (*CreatePasteResponse, error)
	GetPaste(ctx context.Context, in *GetPasteRequest, opts ...grpc.CallOption) (*GetPasteResponse, error)
	// Diff operations
	CreateDiff(ctx context.Context, in *CreateDiffRequest, opts ...grpc.CallOption) (*CreateDiffResponse, error)
	GetDiff(ctx context.Context, in *GetDiffRequest, opts ...grpc.CallOption) (*GetDiffResponse, error)
	// Completion operations
	GetCompletion(ctx context.Context, in *GetCompletionRequest, opts ...grpc.CallOption) (*GetCompletionResponse, error)
}

type pastebinServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPastebinServiceClient(cc grpc.ClientConnInterface) PastebinServiceClient {
	return &pastebinServiceClient{cc}
}

func (c *pastebinServiceClient) CreatePaste(ctx context.Context, in *CreatePasteRequest, opts ...grpc.CallOption) (*CreatePasteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePasteResponse)
	err := c.cc.Invoke(ctx, PastebinService_CreatePaste_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pastebinServiceClient) GetPaste(ctx context.Context, in *GetPasteRequest, opts ...grpc.CallOption) (*GetPasteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPasteResponse)
	err := c.cc.Invoke(ctx, PastebinService_GetPaste_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pastebinServiceClient) CreateDiff(ctx context.Context, in *CreateDiffRequest, opts ...grpc.CallOption) (*CreateDiffResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDiffResponse)
	err := c.cc.Invoke(ctx, PastebinService_CreateDiff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pastebinServiceClient) GetDiff(ctx context.Context, in *GetDiffRequest, opts ...grpc.CallOption) (*GetDiffResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDiffResponse)
	err := c.cc.Invoke(ctx, PastebinService_GetDiff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pastebinServiceClient) GetCompletion(ctx context.Context, in *GetCompletionRequest, opts ...grpc.CallOption) (*GetCompletionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCompletionResponse)
	err := c.cc.Invoke(ctx, PastebinService_GetCompletion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PastebinServiceServer is the server API for PastebinService service.
// All implementations must embed UnimplementedPastebinServiceServer
// for forward compatibility.
//
// Services
type PastebinServiceServer interface {
	// Paste operations
	CreatePaste(context.Context, *CreatePasteRequest) (*CreatePasteResponse, error)
	GetPaste(context.Context, *GetPasteRequest) (*GetPasteResponse, error)
	// Diff operations
	CreateDiff(context.Context, *CreateDiffRequest) (*CreateDiffResponse, error)
	GetDiff(context.Context, *GetDiffRequest) (*GetDiffResponse, error)
	// Completion operations
	GetCompletion(context.Context, *GetCompletionRequest) (*GetCompletionResponse, error)
	mustEmbedUnimplementedPastebinServiceServer()
}

// UnimplementedPastebinServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPastebinServiceServer struct{}

func (UnimplementedPastebinServiceServer) CreatePaste(context.Context, *CreatePasteRequest) (*CreatePasteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePaste not implemented")
}
func (UnimplementedPastebinServiceServer) GetPaste(context.Context, *GetPasteRequest) (*GetPasteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaste not implemented")
}
func (UnimplementedPastebinServiceServer) CreateDiff(context.Context, *CreateDiffRequest) (*CreateDiffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDiff not implemented")
}
func (UnimplementedPastebinServiceServer) GetDiff(context.Context, *GetDiffRequest) (*GetDiffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiff not implemented")
}
func (UnimplementedPastebinServiceServer) GetCompletion(context.Context, *GetCompletionRequest) (*GetCompletionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompletion not implemented")
}
func (UnimplementedPastebinServiceServer) mustEmbedUnimplementedPastebinServiceServer() {}
func (UnimplementedPastebinServiceServer) testEmbeddedByValue()                         {}

// UnsafePastebinServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PastebinServiceServer will
// result in compilation errors.
type UnsafePastebinServiceServer interface {
	mustEmbedUnimplementedPastebinServiceServer()
}

func RegisterPastebinServiceServer(s grpc.ServiceRegistrar, srv PastebinServiceServer) {
	// If the following call pancis, it indicates UnimplementedPastebinServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PastebinService_ServiceDesc, srv)
}

func _PastebinService_CreatePaste_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePasteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PastebinServiceServer).CreatePaste(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PastebinService_CreatePaste_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PastebinServiceServer).CreatePaste(ctx, req.(*CreatePasteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PastebinService_GetPaste_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPasteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PastebinServiceServer).GetPaste(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PastebinService_GetPaste_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PastebinServiceServer).GetPaste(ctx, req.(*GetPasteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PastebinService_CreateDiff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PastebinServiceServer).CreateDiff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PastebinService_CreateDiff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PastebinServiceServer).CreateDiff(ctx, req.(*CreateDiffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PastebinService_GetDiff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PastebinServiceServer).GetDiff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PastebinService_GetDiff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PastebinServiceServer).GetDiff(ctx, req.(*GetDiffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PastebinService_GetCompletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompletionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PastebinServiceServer).GetCompletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PastebinService_GetCompletion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PastebinServiceServer).GetCompletion(ctx, req.(*GetCompletionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PastebinService_ServiceDesc is the grpc.ServiceDesc for PastebinService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PastebinService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pastebin.PastebinService",
	HandlerType: (*PastebinServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePaste",
			Handler:    _PastebinService_CreatePaste_Handler,
		},
		{
			MethodName: "GetPaste",
			Handler:    _PastebinService_GetPaste_Handler,
		},
		{
			MethodName: "CreateDiff",
			Handler:    _PastebinService_CreateDiff_Handler,
		},
		{
			MethodName: "GetDiff",
			Handler:    _PastebinService_GetDiff_Handler,
		},
		{
			MethodName: "GetCompletion",
			Handler:    _PastebinService_GetCompletion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/pastebin.proto",
}
